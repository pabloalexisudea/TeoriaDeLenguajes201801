package teorialenguajes.udea.lab1;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.ComboBox;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicMenuBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import teorialenguajes.udea.lab1.model.AutomataPila;
import teorialenguajes.udea.lab1.model.ColumsAutoSizer;
import teorialenguajes.udea.lab1.model.Estado;
import teorialenguajes.udea.lab1.model.Transicion;

/**
 *
 * @author edale
 */
public class WindowEditAP extends javax.swing.JFrame {

    private int x, y;
    // private String jsonTestText = "{  \"Simbolos de entrada\": [    \"(\",    \")\",    \"┤\"  ],  \"Simbolos en la pila\": [    \"(\",    \"▼\"  ],  \"Estados\": [    {      \"nombre\": \"S0\",      \"inicial\": true,      \"transiciones\": [        [          \"#1\",          \"#2\",          \"R\"        ],        [          \"#1\",          \"R\",          \"A\"        ]      ]    }  ],  \"Configuracion inicial\": [    \"▼\"  ],  \"Transiciones\": {    \"#1\": [      \"apile('(')\",      \"permanezca\",      \"avance\"    ],    \"#2\": [      \"desapile\",      \"permanezca\",      \"avance\"    ],    \"R\": [      \"Rechace\"    ],    \"A\": [      \"Acepte\"    ]  }}";
    // private String jsonTestText1 = "{  \"Simbolos de entrada\": [],  \"Simbolos en la pila\": [],  \"Estados\": [],  \"Configuracion inicial\": [],  \"Transiciones\": {}}";
    private JSONObject jsonTest;
    private JTable tablaTransiciones;

    public WindowEditAP() {
        super("Autómata de Pila");

        initComponents();

        generalJPane.setLayout(new FlowLayout(FlowLayout.LEFT));

        styleForWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        generalJPane = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setUndecorated(true);
        setResizable(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout generalJPaneLayout = new javax.swing.GroupLayout(generalJPane);
        generalJPane.setLayout(generalJPaneLayout);
        generalJPaneLayout.setHorizontalGroup(
            generalJPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1382, Short.MAX_VALUE)
        );
        generalJPaneLayout.setVerticalGroup(
            generalJPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(generalJPane);

        jMenuBar1.setBackground(new java.awt.Color(153, 153, 153));
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseDragged(evt);
            }
        });
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuBar1MousePressed(evt);
            }
        });

        jMenu1.setBackground(new java.awt.Color(24, 24, 24));
        jMenu1.setForeground(new java.awt.Color(255, 255, 255));
        jMenu1.setText("File");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu1.add(jSeparator2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Save        ");
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator3);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1258, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuBar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_jMenuBar1MousePressed

    private void jMenuBar1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseDragged
        setLocation(getLocation().x + evt.getX() - x, getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_jMenuBar1MouseDragged

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowEditAP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowEditAP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowEditAP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowEditAP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowEditAP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel generalJPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables

    private void styleForWindow() {
        getContentPane().setBackground(new java.awt.Color(240, 240, 240));
        setLocationRelativeTo(null);

        jMenuBar1.setUI(new BasicMenuBarUI() {
            public void paint(Graphics g, JComponent c) {
                g.setColor(Color.getColor("#666666"));
                g.fillRect(0, 0, c.getWidth(), c.getHeight());
            }
        });
    }

    public void cargarAPParaEditar() throws JSONException {
        generalJPane.removeAll();

        JPanel panelSimbolosEntrada = new JPanel(new FlowLayout());
        JPanel panelSimbolosEnPila = new JPanel(new FlowLayout());
        JPanel panelEstados = new JPanel(new FlowLayout());
        JPanel panelTransiciones = new JPanel(new FlowLayout());
        JPanel panelConfInicial = new JPanel(new FlowLayout());

        panelSimbolosEntrada.setLayout(new BoxLayout(panelSimbolosEntrada, BoxLayout.Y_AXIS));
        panelSimbolosEnPila.setLayout(new BoxLayout(panelSimbolosEnPila, BoxLayout.Y_AXIS));
        panelEstados.setLayout(new BoxLayout(panelEstados, BoxLayout.PAGE_AXIS));
        panelTransiciones.setLayout(new BoxLayout(panelTransiciones, BoxLayout.PAGE_AXIS));
        panelConfInicial.setLayout(new BoxLayout(panelConfInicial, BoxLayout.PAGE_AXIS));

        // cargar los datos a los paneles
        panelSimbolosEntrada.add(cargarPanelSimbolosEntrada(panelSimbolosEntrada, panelEstados, panelTransiciones));
        panelSimbolosEnPila.add(cargarPanelSimbolosEnPila(panelSimbolosEnPila, panelTransiciones, panelEstados));
        panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));
        panelTransiciones.add(cargarPanelTransiciones(panelTransiciones));
        panelConfInicial.add(cargarPanelConfInicial(panelConfInicial));

        // Agregar paneles al panel general
        generalJPane.add(panelSimbolosEntrada);
        generalJPane.add(panelSimbolosEnPila);
        generalJPane.add(panelEstados);
        generalJPane.add(panelTransiciones);
        generalJPane.add(panelConfInicial);

    }

    //<editor-fold desc="SIMBOLOS DE ENTRADA">
    private JPanel cargarPanelSimbolosEntrada(JPanel panelSImbolosEntrada, JPanel panelEstados, JPanel panelTransiciones) throws JSONException {
        JLabel tituloDelPanel = new JLabel("Símbolos de Entrada");
        tituloDelPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
        panelSImbolosEntrada.add(tituloDelPanel);

        JSONArray simbolosEntrada = jsonTest.getJSONArray("Simbolos de entrada");

        final JPanel panelContenedor = new JPanel();
        panelContenedor.setOpaque(false);
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setSize(panelContenedor.getPreferredSize());

        for (int i = 0; i < simbolosEntrada.length(); i++) {
            JPanel panel1 = new JPanel();
            panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));
            panel1.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
            panel1.setOpaque(false);
            TextField txt1 = new TextField(String.valueOf(simbolosEntrada.get(i)));
            Button btn1 = new Button("-");
            final int ii = i;
            btn1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String simbolo = txt1.getText().toString();
                    try {
                        if (!simbolo.isEmpty()) {
                            for (int j = 0; j < simbolosEntrada.length(); j++) {
                                if (simbolo.equals(simbolosEntrada.get(j).toString())) {
                                    jsonTest.getJSONArray("Simbolos de entrada").remove(j);

                                    eliminarEstados();

                                    panelEstados.removeAll();
                                    panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                                    break;
                                }
                            }
                        }
                    } catch (JSONException ex) {
                        ex.printStackTrace();
                    }

                    panelContenedor.remove(panel1);

                    generalJPane.validate();
                    generalJPane.repaint();
                }
            });
            panel1.add(txt1);
            panel1.add(btn1);

            panelContenedor.add(panel1);
        }

        cargarCampoAlFinalDeListaDeSimbolosEntrada(simbolosEntrada, panelSImbolosEntrada, panelContenedor, panelEstados, panelTransiciones);

        return panelContenedor;
    }

    private void cargarCampoAlFinalDeListaDeSimbolosEntrada(JSONArray simbolosEntrada,
            JPanel panelSImbolosEntrada, JPanel panelContenedor, JPanel panelEstados, JPanel panelTransiciones) {
        // Agregar último campo para agregar nuevos simbolos
        JPanel panel1 = new JPanel();
        panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));
        panel1.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
        panel1.setOpaque(false);
        TextField txt1 = new TextField();
        Button btn1 = new Button("+");
        btn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (!txt1.getText().isEmpty()) {
                        String simbolo = txt1.getText().toString();
                        boolean yaExisteEnElArreglo = false;

                        for (int i = 0; i < simbolosEntrada.length(); i++) {

                            if (simbolo.equals(simbolosEntrada.get(i).toString())) {
                                yaExisteEnElArreglo = true;
                                break;
                            }

                        }

                        if (!yaExisteEnElArreglo) {
                            jsonTest.getJSONArray("Simbolos de entrada").put(simbolo);
                            panelSImbolosEntrada.removeAll();

                            panelSImbolosEntrada.add(cargarPanelSimbolosEntrada(panelSImbolosEntrada, panelEstados, panelTransiciones));

                            eliminarEstados();

                            panelEstados.removeAll();
                            panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                            generalJPane.validate();
                            generalJPane.repaint();
                        }
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }
        });
        txt1.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (txt1.getText().length() == 1) {
                    e.consume();
                }

                int keyCode = (int) e.getKeyChar();
                try {
                    if (!txt1.getText().isEmpty() && keyCode == 10) {
                        String simbolo = txt1.getText().toString();
                        boolean yaExisteEnElArreglo = false;

                        for (int i = 0; i < simbolosEntrada.length(); i++) {

                            if (simbolo.equals(simbolosEntrada.get(i).toString())) {
                                yaExisteEnElArreglo = true;
                                break;
                            }

                        }

                        if (!yaExisteEnElArreglo) {
                            jsonTest.getJSONArray("Simbolos de entrada").put(simbolo);
                            panelSImbolosEntrada.removeAll();

                            panelSImbolosEntrada.add(cargarPanelSimbolosEntrada(panelSImbolosEntrada, panelEstados, panelTransiciones));

                            eliminarEstados();

                            panelEstados.removeAll();
                            panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                            generalJPane.validate();
                            generalJPane.repaint();
                        }
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {

            }
        });
        txt1.requestFocusInWindow();
        txt1.requestFocus();
        panel1.add(txt1);
        panel1.add(btn1);

        panelContenedor.add(panel1);
    }
    //</editor-fold>

    //<editor-fold desc="SIMBOLOS EN LA PILA">
    private JPanel cargarPanelSimbolosEnPila(JPanel panelSimbolosEnPila, JPanel panelTransiciones, JPanel panelEstados) throws JSONException {
        JLabel tituloDelPanel = new JLabel("Símbolos en la Pila");
        tituloDelPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
        panelSimbolosEnPila.add(tituloDelPanel);

        JSONArray simbolosPila = jsonTest.getJSONArray("Simbolos en la pila");

        final JPanel panelContenedor = new JPanel();
        panelContenedor.setOpaque(false);
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setSize(panelContenedor.getPreferredSize());

        for (int i = 0; i < simbolosPila.length(); i++) {
            JPanel panel1 = new JPanel();
            panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));
            panel1.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
            panel1.setOpaque(false);
            TextField txt1 = new TextField(String.valueOf(simbolosPila.get(i)));
            Button btn1 = new Button("-");
            final int ii = i;
            btn1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String simbolo = txt1.getText().toString();
                    try {
                        if (!simbolo.isEmpty()) {
                            for (int j = 0; j < simbolosPila.length(); j++) {
                                if (simbolo.equals(simbolosPila.get(j).toString())) {
                                    jsonTest.getJSONArray("Simbolos en la pila").remove(j);

                                    eliminarEstados();

                                    panelEstados.removeAll();
                                    panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                                    break;
                                }
                            }
                        }
                    } catch (JSONException ex) {
                        ex.printStackTrace();
                    }

                    panelContenedor.remove(panel1);

                    generalJPane.validate();
                    generalJPane.repaint();
                }
            });
            panel1.add(txt1);
            panel1.add(btn1);

            panelContenedor.add(panel1);
        }

        cargarCampoAlFinalDeListaDeSimbolosEnPila(simbolosPila, panelSimbolosEnPila, panelContenedor, panelTransiciones, panelEstados);

        return panelContenedor;
    }

    private void cargarCampoAlFinalDeListaDeSimbolosEnPila(JSONArray simbolosEnPila, JPanel panelSimbolosEnPila, JPanel panelContenedor, JPanel panelTransiciones, JPanel panelEstados) {
        // Agregar último campo para agregar nuevos simbolos
        JPanel panel1 = new JPanel();
        panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));
        panel1.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
        panel1.setOpaque(false);
        TextField txt1 = new TextField();
        Button btn1 = new Button("+");
        btn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (!txt1.getText().isEmpty()) {
                        String simbolo = txt1.getText().toString();
                        boolean yaExisteEnElArreglo = false;

                        for (int i = 0; i < simbolosEnPila.length(); i++) {

                            if (simbolo.equals(simbolosEnPila.get(i).toString())) {
                                yaExisteEnElArreglo = true;
                                break;
                            }

                        }

                        if (!yaExisteEnElArreglo) {
                            jsonTest.getJSONArray("Simbolos en la pila").put(simbolo);

                            panelSimbolosEnPila.removeAll();
                            panelTransiciones.removeAll();

                            panelSimbolosEnPila.add(cargarPanelSimbolosEnPila(panelSimbolosEnPila, panelTransiciones, panelEstados));
                            panelTransiciones.add(cargarPanelTransiciones(panelTransiciones));

                            eliminarEstados();

                            panelEstados.removeAll();
                            panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                            generalJPane.validate();
                            generalJPane.repaint();
                        }
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }
        });
        txt1.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (txt1.getText().length() == 1) {
                    e.consume();
                }

                int keyCode = (int) e.getKeyChar();
                try {
                    if (!txt1.getText().isEmpty() && keyCode == 10) {
                        String simbolo = txt1.getText().toString();
                        boolean yaExisteEnElArreglo = false;

                        for (int i = 0; i < simbolosEnPila.length(); i++) {

                            if (simbolo.equals(simbolosEnPila.get(i).toString())) {
                                yaExisteEnElArreglo = true;
                                break;
                            }

                        }

                        if (!yaExisteEnElArreglo) {
                            jsonTest.getJSONArray("Simbolos en la pila").put(simbolo);
                            panelSimbolosEnPila.removeAll();

                            panelSimbolosEnPila.add(cargarPanelSimbolosEnPila(panelSimbolosEnPila, panelTransiciones, panelEstados));

                            eliminarEstados();

                            panelEstados.removeAll();
                            panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                            generalJPane.validate();
                            generalJPane.repaint();
                        }
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {

            }
        });
        txt1.requestFocusInWindow();
        txt1.requestFocus();
        panel1.add(txt1);
        panel1.add(btn1);

        panelContenedor.add(panel1);
    }
    //</editor-fold>

    //<editor-fold desc="ESTADOS">
    private JPanel cargarPanelEstados(JPanel panelEstados, JPanel panelTransiciones) throws JSONException {
        JLabel tituloDelPanel = new JLabel("Estados");

        tituloDelPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));

        panelEstados.setOpaque(true);
        panelEstados.setBackground(Color.ORANGE);
        panelEstados.add(tituloDelPanel);

        JSONArray estadosJSON = jsonTest.getJSONArray("Estados");

        final JPanel panelContenedor = new JPanel();
        panelContenedor.setOpaque(false);
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        for (int i = 0; i < estadosJSON.length(); i++) {
            JPanel panelDelEstado = new JPanel();
            panelDelEstado.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
            panelDelEstado.setOpaque(false);
            panelDelEstado.setLayout(new BoxLayout(panelDelEstado, BoxLayout.Y_AXIS));

            JSONObject estadoJSON = estadosJSON.getJSONObject(i);

            JLabel nombreEstado = new JLabel(estadoJSON.getString("nombre") + (estadoJSON.getBoolean("inicial") ? ", Inicial" : ""));

            JSONArray transicionesDelEstado = estadoJSON.getJSONArray("transiciones");

            // CREAR MATRIZ PARA EL ESTADO
            String[] simbolosEntrada = simbolosDeEntrada();
            String[] simbolosEnPila = simbolosDePila();

            String[][] matrizEstados = new String[simbolosEnPila.length + 1][simbolosEntrada.length + 1];
            matrizEstados[0][0] = "";
            int m = matrizEstados.length;
            int n = matrizEstados[0].length;

            for (int j = 0; j < m; j++) {
                for (int k = 0; k < n; k++) {
                    if (j == 0) {
                        if (k > 0) {
                            matrizEstados[j][k] = simbolosEntrada[k - 1];
                        }
                    } else {
                        if (k == 0) {
                            matrizEstados[j][k] = simbolosEnPila[j - 1];
                        } else {
                            JSONArray arrayItems = transicionesDelEstado.getJSONArray(j - 1);
                            matrizEstados[j][k] = (String) arrayItems.get(k - 1);
                        }
                    }
                }
            }

            JTable tablaDeTransicionesDelEstado = new JTable(matrizEstados.length, matrizEstados[0].length);
            tablaDeTransicionesDelEstado.setEnabled(false);

            for (int j = 0; j < matrizEstados.length; j++) {
                for (int k = 0; k < matrizEstados[j].length; k++) {
                    tablaDeTransicionesDelEstado.getColumnModel().getColumn(k).setPreferredWidth(40);
                    DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
                    rightRenderer.setHorizontalAlignment(JLabel.CENTER);
                    tablaDeTransicionesDelEstado.getColumnModel().getColumn(k).setCellRenderer(rightRenderer);

                    tablaDeTransicionesDelEstado.setValueAt(matrizEstados[j][k], j, k);
                }
            }

            panelDelEstado.add(nombreEstado);
            panelDelEstado.add(tablaDeTransicionesDelEstado);

            Button eliminarEstado = new Button("-");
            eliminarEstado.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        String nombreEstado = estadoJSON.getString("nombre");

                        eliminarEstado(nombreEstado);

                        panelEstados.removeAll();
                        panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                        panelTransiciones.removeAll();
                        panelTransiciones.add(cargarPanelTransiciones(panelTransiciones));

                        generalJPane.validate();
                        generalJPane.repaint();

                    } catch (JSONException ex) {
                        ex.printStackTrace();
                    }
                }
            });
            panelDelEstado.add(eliminarEstado);

            panelContenedor.add(panelDelEstado);
        }

        cargarCampoAgregarEstadoAlFinal(panelContenedor, panelEstados, panelTransiciones);

        return panelContenedor;
    }

    private JPanel cargarCampoAgregarEstadoAlFinal(JPanel panelContenedor, JPanel panelEstados, JPanel panelTransiciones) throws JSONException {
        JPanel panelDelEstado = new JPanel();
        panelDelEstado.setOpaque(false);
        panelDelEstado.setLayout(new BoxLayout(panelDelEstado, BoxLayout.Y_AXIS));
        panelDelEstado.setBorder(BorderFactory.createEmptyBorder(10, 0, 5, 0));

        // CREAR MATRIZ PARA EL ESTADO
        String[] simbolosEntrada = simbolosDeEntrada();
        String[] simbolosEnPila = simbolosDePila();

        String[][] matrizEstados = new String[simbolosEnPila.length + 1][simbolosEntrada.length + 1];
        matrizEstados[0][0] = "";
        int m = matrizEstados.length;
        int n = matrizEstados[0].length;

        for (int j = 0; j < m; j++) {
            for (int k = 0; k < n; k++) {
                if (j == 0) {
                    if (k > 0) {
                        matrizEstados[j][k] = simbolosEntrada[k - 1];
                    }
                } else {
                    if (k == 0) {
                        matrizEstados[j][k] = simbolosEnPila[j - 1];
                    } else {
                        matrizEstados[j][k] = "-";
                    }
                }
            }
        }

        JCheckBox inicial = new JCheckBox("Inicial");
        JTextField nombre = new JTextField(3);
        nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if (nombre.getText().toString().length() >= 3) {
                    evt.consume();
                }
            }
        });

        JTable tablaDeTransicionesDelEstado = new JTable(matrizEstados.length, matrizEstados[0].length) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (row == 0 || column == 0) {
                    return false;
                } else {
                    return true;
                }
            }
        };

        for (int j = 0; j < matrizEstados.length; j++) {
            for (int k = 0; k < matrizEstados[j].length; k++) {
                if (matrizEstados[j][k].equals("-")) {
                    tablaDeTransicionesDelEstado.setValueAt("", j, k);
                } else {
                    tablaDeTransicionesDelEstado.getColumnModel().getColumn(k).setPreferredWidth(40);
                    DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
                    rightRenderer.setHorizontalAlignment(JLabel.CENTER);
                    tablaDeTransicionesDelEstado.getColumnModel().getColumn(k).setCellRenderer(rightRenderer);

                    tablaDeTransicionesDelEstado.setValueAt(matrizEstados[j][k], j, k);
                }
            }
        }

        Button btnAgregarEstado = new Button("Agregar estado");
        btnAgregarEstado.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    boolean todosLosCamposEstanLlenos = true;
                    for (int i = 1; i < tablaDeTransicionesDelEstado.getRowCount(); i++) {
                        for (int j = 1; j < tablaDeTransicionesDelEstado.getColumnCount(); j++) {
                            if (tablaDeTransicionesDelEstado.getModel().getValueAt(i, j).toString().isEmpty()) {
                                todosLosCamposEstanLlenos = false;

                                JOptionPane.showMessageDialog(null, "Por favor llene todos los campos");

                                break;
                            }
                        }
                        if (!todosLosCamposEstanLlenos) {
                            break;
                        }
                    }

                    if (todosLosCamposEstanLlenos) {
                        String nombreIngresado = nombre.getText().toString();
                        boolean esInicial = false;

                        if (nombreIngresado.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Ingrese un nombre para el estado");
                        } else {
                            if (nombreIngresado.length() > 3) {
                                nombreIngresado = nombreIngresado.substring(0, 3);
                            }

                            if (inicial.isVisible() && inicial.isSelected()) {
                                esInicial = true;
                            }

                            JSONArray arrayTransiciones = new JSONArray();
                            for (int i = 1; i < tablaDeTransicionesDelEstado.getRowCount(); i++) {
                                JSONArray items = new JSONArray();

                                for (int j = 1; j < tablaDeTransicionesDelEstado.getColumnCount(); j++) {
                                    items.put(tablaDeTransicionesDelEstado.getModel().getValueAt(i, j).toString());
                                }

                                arrayTransiciones.put(items);
                            }

                            JSONObject objectEstado = new JSONObject();
                            objectEstado.put("nombre", nombreIngresado);
                            objectEstado.put("inicial", esInicial);
                            objectEstado.put("transiciones", arrayTransiciones);

                            jsonTest.getJSONArray("Estados").put(objectEstado);

                            panelEstados.removeAll();
                            panelEstados.add(cargarPanelEstados(panelEstados, panelTransiciones));

                            panelTransiciones.removeAll();
                            panelTransiciones.add(cargarPanelTransiciones(panelTransiciones));

                            generalJPane.validate();
                            generalJPane.repaint();
                        }
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }
        });

        JPanel panelDelNombre = new JPanel(new FlowLayout());

        panelDelNombre.add(nombre);
        panelDelNombre.add(inicial);

        if (yaHayUnEstadoInicial()) {
            inicial.setVisible(false);
        }

        panelDelEstado.add(panelDelNombre);
        panelDelEstado.add(tablaDeTransicionesDelEstado);
        panelDelEstado.add(btnAgregarEstado);

        panelContenedor.add(panelDelEstado);

        return panelContenedor;
    }
    //</editor-fold>

    //<editor-fold desc="TRANSICIONES">
    private JPanel cargarPanelTransiciones(JPanel panelTransiciones) throws JSONException {
        JLabel tituloDelPanel = new JLabel("Transiciones");

        tituloDelPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));

        panelTransiciones.setOpaque(true);
        panelTransiciones.setBackground(Color.LIGHT_GRAY);
        panelTransiciones.add(tituloDelPanel);

        JSONObject transicionesJSON = jsonTest.getJSONObject("Transiciones");

        final JPanel panelContenedor = new JPanel();
        panelContenedor.setOpaque(false);
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        // TRANSICIONES
        Iterator transcicionesKeys = transicionesJSON.keys();
        while (transcicionesKeys.hasNext()) {
            JLabel labelTransicion = new JLabel();

            String nombre = (String) transcicionesKeys.next();
            JSONArray operaciones = transicionesJSON.getJSONArray(nombre);

            String oper1 = null;
            String oper2 = null;
            String oper3 = null;

            for (int i = 0; i < operaciones.length(); i++) {
                if (i == 0) {
                    oper1 = operaciones.getString(i);
                } else if (i == 1) {
                    oper2 = operaciones.getString(i);
                } else if (i == 2) {
                    oper3 = operaciones.getString(i);
                }
            }

            String fullName = nombre + ": ";
            if (oper1 != null && oper2 != null && oper3 != null) {
                fullName += oper1 + ", " + oper2 + ", " + oper3;
            } else if (oper1 != null && oper2 != null) {
                fullName += oper1 + ", " + oper2;
            } else if (oper1 != null && oper3 != null) {
                fullName += oper1 + ", " + oper3;
            } else if (oper2 != null && oper3 != null) {
                fullName += oper2 + ", " + oper3;
            } else if (oper1 != null) {
                fullName += oper1;
            } else if (oper2 != null) {
                fullName += oper2;
            } else if (oper3 != null) {
                fullName += oper3;
            }

            labelTransicion.setText(fullName);
            labelTransicion.setAlignmentX(Component.LEFT_ALIGNMENT);

            JPanel panelLabel = new JPanel(new FlowLayout());
            panelLabel.setOpaque(false);

            Button eliminarTransicion = new Button("-");
            eliminarTransicion.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        eliminarTransicion(nombre);

                        panelTransiciones.removeAll();
                        panelTransiciones.add(cargarPanelTransiciones(panelTransiciones));

                        generalJPane.validate();
                        generalJPane.repaint();
                    } catch (JSONException ex) {
                        ex.printStackTrace();
                    }
                }
            });

            panelLabel.add(labelTransicion);
            panelLabel.add(eliminarTransicion);

            panelContenedor.add(panelLabel);
        }

        cargarCampoAlFinalDeListaDeTransiciones(panelTransiciones, panelContenedor);

        return panelContenedor;
    }

    private void cargarCampoAlFinalDeListaDeTransiciones(JPanel panelTransiciones, JPanel panelContenedor) throws JSONException {
        JPanel panelAgregarTransicion = new JPanel(new FlowLayout(FlowLayout.LEFT));

        JComboBox nombreTransicion = new JComboBox(nombresDeLasTrancisiones());

        // OPERACION EN LA PILA
        JComboBox operPila = new JComboBox(simbolosEnLaPilaParaBox());

        // OPERACION EN LOS ESTADOS
        JComboBox operEstados = new JComboBox(accionDeEstado());

        // OPERACION DE ENTRADA
        String[] entradas = {"", "Avance", "Retenga"};
        JComboBox operEntrada = new JComboBox(entradas);

        // ACCIONES 
        String[] acciones = {"", "Acepte", "Rechace"};
        JComboBox operAccion = new JComboBox(acciones);

        operPila.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String item = operAccion.getSelectedItem().toString();
                if (!item.isEmpty()) {
                    operAccion.setSelectedIndex(0);
                }
            }
        });
        operEstados.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String item = operAccion.getSelectedItem().toString();
                if (!item.isEmpty()) {
                    operAccion.setSelectedIndex(0);
                }
            }
        });
        operEntrada.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String item = operAccion.getSelectedItem().toString();
                if (!item.isEmpty()) {
                    operAccion.setSelectedIndex(0);
                }
            }
        });
        operAccion.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String item = operAccion.getSelectedItem().toString();
                if (!item.isEmpty()) {
                    operPila.setSelectedIndex(0);
                    operEstados.setSelectedIndex(0);
                    operEntrada.setSelectedIndex(0);
                }
            }
        });

        Button agregarTransicion = new Button("+");
        agregarTransicion.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String nombreTran = nombreTransicion.getSelectedItem().toString();

                    if (!nombreTran.isEmpty()) {
                        String oper1 = operPila.getSelectedItem().toString();
                        String oper2 = operEstados.getSelectedItem().toString();
                        String oper3 = operEntrada.getSelectedItem().toString();
                        String oper4 = operAccion.getSelectedItem().toString();

                        if (oper1.isEmpty() && oper2.isEmpty() && oper3.isEmpty() && oper4.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Indique operaciones a realizar", "Sin operaciones", JOptionPane.WARNING_MESSAGE);
                        } else {
                            JSONArray arrayDeTransiciones = new JSONArray();

                            if (oper4.isEmpty()) {
                                if (!oper1.isEmpty()) {
                                    arrayDeTransiciones.put(oper1);
                                }

                                if (!oper2.isEmpty()) {
                                    arrayDeTransiciones.put(oper2);
                                }

                                if (!oper3.isEmpty()) {
                                    arrayDeTransiciones.put(oper3);
                                }
                            } else {
                                arrayDeTransiciones.put(oper4);
                            }

                            jsonTest.getJSONObject("Transiciones").put(nombreTran, arrayDeTransiciones);

                            panelTransiciones.removeAll();
                            panelTransiciones.add(cargarPanelTransiciones(panelTransiciones));

                            generalJPane.validate();
                            generalJPane.repaint();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor ingrese el nombre de la transición", "Sin nombre para la Transición", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }
        });

        panelAgregarTransicion.add(nombreTransicion);
        panelAgregarTransicion.add(operPila);
        panelAgregarTransicion.add(operEstados);
        panelAgregarTransicion.add(operEntrada);
        panelAgregarTransicion.add(operAccion);
        panelAgregarTransicion.add(agregarTransicion);

        panelContenedor.add(panelAgregarTransicion);

    }
    //</editor-fold>

    private JPanel cargarPanelConfInicial(JPanel panelConfInicial) throws JSONException {
        JLabel tituloDelPanel = new JLabel("Conf. Inicial");
        tituloDelPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
        panelConfInicial.add(tituloDelPanel);
        panelConfInicial.setBackground(Color.ORANGE);

        JSONArray configInicial = jsonTest.getJSONArray("Configuracion inicial");

        final JPanel panelContenedor = new JPanel();
        panelContenedor.setOpaque(false);
        panelContenedor.setLayout(new BoxLayout(panelContenedor, BoxLayout.Y_AXIS));
        panelContenedor.setSize(panelContenedor.getPreferredSize());

        TextField configuracionInicial = new TextField(5);
        configuracionInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                int n = (int) evt.getKeyChar();
                try {
                    boolean estaEnPermitidos = false;
                    String[] simbolosEnPila = simbolosDePila();

                    for (int i = 0; i < simbolosEnPila.length; i++) {
                        if (Character.toString(evt.getKeyChar()).equals(simbolosEnPila[i])) {
                            estaEnPermitidos = true;
                            break;
                        }
                    }
                    if (!estaEnPermitidos) {
                        evt.consume();
                    }
                } catch (JSONException ex) {
                    ex.printStackTrace();
                }
            }
        });

        panelConfInicial.add(configuracionInicial);

        return panelContenedor;
    }

    private String[] simbolosEnLaPilaParaBox() throws JSONException {
        JSONArray simbolosEnPila = jsonTest.getJSONArray("Simbolos en la pila");
        String[] simbolos = new String[simbolosEnPila.length() + 2];

        simbolos[0] = "";
        for (int i = 0; i < simbolosEnPila.length(); i++) {
            simbolos[i + 1] = "Apile('" + simbolosEnPila.get(i) + "')";
        }
        simbolos[simbolos.length - 1] = "Desapile";

        return simbolos;
    }

    private String[] simbolosDePila() throws JSONException {
        JSONArray simbolosEnPila = jsonTest.getJSONArray("Simbolos en la pila");
        String[] simbolos = new String[simbolosEnPila.length()];

        for (int i = 0; i < simbolosEnPila.length(); i++) {
            simbolos[i] = (String) simbolosEnPila.get(i);
        }

        return simbolos;
    }

    private String[] simbolosDeEntrada() throws JSONException {
        JSONArray simbolosEntrada = jsonTest.getJSONArray("Simbolos de entrada");
        String[] simbolos = new String[simbolosEntrada.length()];

        for (int i = 0; i < simbolosEntrada.length(); i++) {
            simbolos[i] = (String) simbolosEntrada.get(i);
        }

        return simbolos;
    }

    private String[] nombresDeLasTrancisiones() throws JSONException {
        JSONArray arrayEstados = jsonTest.getJSONArray("Estados");
        List<String> nombres = new ArrayList<String>();

        for (int i = 0; i < arrayEstados.length(); i++) {
            JSONObject obj = arrayEstados.getJSONObject(i);

            JSONArray arregloTransiciones = obj.getJSONArray("transiciones");

            for (int j = 0; j < arregloTransiciones.length(); j++) {
                JSONArray nombresDelEstado = arregloTransiciones.getJSONArray(j);

                for (int k = 0; k < nombresDelEstado.length(); k++) {
                    if (!nombres.contains(String.valueOf(nombresDelEstado.get(k)))) {
                        nombres.add(String.valueOf(nombresDelEstado.get(k)));
                    }
                }
            }
        }

        String[] nombresFull = new String[nombres.size() + 1];
        nombresFull[0] = "";
        for (int i = 1; i < nombresFull.length; i++) {
            nombresFull[i] = nombres.get(i - 1);
        }

        return nombresFull;
    }

    private String[] accionDeEstado() throws JSONException {//Permanezca
        JSONArray estados = jsonTest.getJSONArray("Estados");
        String[] cambiosJson = new String[estados.length() + 2];
        cambiosJson[0] = "";
        cambiosJson[1] = "Permanezca";

        for (int i = 0; i < estados.length(); i++) {
            JSONObject object = estados.getJSONObject(i);

            cambiosJson[i + 2] = "Cambia a " + object.getString("nombre");
        }

        return cambiosJson;
    }

    private void eliminarEstados() throws JSONException {
        jsonTest.put("Estados", new JSONArray());
    }

    private void eliminarEstado(String nombreEstado) throws JSONException {
        JSONArray estados = jsonTest.getJSONArray("Estados");
        for (int i = 0; i < estados.length(); i++) {
            JSONObject item = estados.getJSONObject(i);
            if (item.getString("nombre").equals(nombreEstado)) {
                jsonTest.getJSONArray("Estados").remove(i);

                break;
            }
        }
    }

    private void eliminarTransicion(String nombreTransicion) throws JSONException {
        JSONObject transicionesJSON = jsonTest.getJSONObject("Transiciones");

        Iterator transcicionesKeys = transicionesJSON.keys();
        while (transcicionesKeys.hasNext()) {
            String nombre = (String) transcicionesKeys.next();

            if (nombre.equals(nombreTransicion)) {
                jsonTest.getJSONObject("Transiciones").remove(nombre);
                break;
            }

        }
    }

    private boolean yaHayUnEstadoInicial() throws JSONException {
        JSONArray arrayEstados = jsonTest.getJSONArray("Estados");

        boolean esInicial = false;

        for (int i = 0; i < arrayEstados.length(); i++) {
            JSONObject obj = arrayEstados.getJSONObject(i);

            if (obj.getBoolean("inicial")) {
                esInicial = true;

                break;
            }
        }
        return esInicial;
    }

    // TODO: PARA PASAR DATOS DESDE LA VISTA ANTERIOR
    public void cargarJSONParaEditar(JSONObject object) throws JSONException {
        jsonTest = object;
    }
}
