package teorialenguajes.udea.lab1;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicMenuBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import teorialenguajes.udea.lab1.model.AutomataPila;
import teorialenguajes.udea.lab1.model.ColumsAutoSizer;
import teorialenguajes.udea.lab1.model.Estado;
import teorialenguajes.udea.lab1.model.Transicion;

/**
 *
 * @author edale
 */
public class WindowPrint extends javax.swing.JFrame {

    private int x, y;
    private String jsonTest = "{\"Simbolos de entrada\":[\"0\", \"1\", \"&\"],\"Simbolos en la pila\":[\"0\", \"▼\"],\"Estados\":[{\"nombre\":\"S0\",\"inicial\":true,\"transiciones\":[[\"#1\",\"#2\",\"R\"],[\"#1\",\"R\",\"R\"]]},{\"nombre\":\"S1\",\"inicial\":false,\"transiciones\":[[\"R\",\"#3\",\"R\"],[\"R\",\"R\",\"A\"]]}],\"Configuracion inicial\":[\"▼\"],\"Transiciones\":{\"#1\":[\"apile('0')\",\"permanezca\",\"avance\"],\"#2\":[\"desapile\",\"cambia S1\",\"avance\"],\"#3\":[\"desapile\",\"permanezca\",\"avance\"],\"R\":[\"Rechace\"],\"A\":[\"Acepte\"]}}";
    private String jsonVacio = "{\"Simbolos de entrada\": [],\"Simbolos en la pila\": [],\"Estados\": [],\"Configuracion inicial\": [],\"Transiciones\": {}}";
    private JSONObject jsonAP;
    private JTable tablaTransiciones;
    private DefaultTableModel model;
    private AutomataPila a = null;

    private String part1 = "<html><body><font color='gray'; size='6'>|</font>";
    private String part2 = "<b><font color='red'>";
    private String part3 = "</font></b>";
    private String part4 = "</body></html>";
    private String part5 = "<font color='gray'; size='6'>|</font>";

    Stack<Character> pila = new Stack<Character>();
    private List<Character> listaPila = new ArrayList<Character>();

    private WindowEditAP editAP;

    public WindowPrint() {
        super("Autómata de Pila");

        initComponents();

        getContentPane().setBackground(new java.awt.Color(48, 48, 48));
        setLocationRelativeTo(null);

        jMenuBar1.setUI(new BasicMenuBarUI() {
            public void paint(Graphics g, JComponent c) {
                g.setColor(Color.getColor("#333333"));
                g.fillRect(0, 0, c.getWidth(), c.getHeight());
            }
        });
        scrollInformacion.getViewport().setOpaque(false);
        scrollOperaciones.getViewport().setOpaque(false);

        panelTransiciones.setLayout(new BoxLayout(panelTransiciones, BoxLayout.Y_AXIS));

        editAP = new WindowEditAP();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContenedor = new javax.swing.JPanel();
        scrollInformacion = new javax.swing.JScrollPane();
        panelDeInformacion = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        simbolosEntrada = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        simbolosPila = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        estados = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        estadoInicial = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        confiInicialPila = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        transicionesAp = new javax.swing.JLabel();
        scrollOperaciones = new javax.swing.JScrollPane();
        panelDeOperaciones = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelTransiciones = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        Cadena = new javax.swing.JLabel();
        inputDataAP = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        textoDeLaPila = new javax.swing.JLabel();
        udeaLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setUndecorated(true);
        setResizable(false);

        panelContenedor.setBackground(new java.awt.Color(155, 0, 0));
        panelContenedor.setOpaque(false);

        scrollInformacion.setToolTipText("");
        scrollInformacion.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        scrollInformacion.setOpaque(false);

        panelDeInformacion.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(178, 178, 178));
        jLabel2.setText("Símbolos de Entrada:");

        simbolosEntrada.setForeground(new java.awt.Color(178, 178, 178));
        simbolosEntrada.setText("{}");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(178, 178, 178));
        jLabel4.setText("Sínbolos en Pila:");

        simbolosPila.setForeground(new java.awt.Color(178, 178, 178));
        simbolosPila.setText("{}");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(178, 178, 178));
        jLabel6.setText("Estados:");

        estados.setForeground(new java.awt.Color(178, 178, 178));
        estados.setText("{}");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(178, 178, 178));
        jLabel8.setText("Estado Inicial:");

        estadoInicial.setForeground(new java.awt.Color(178, 178, 178));
        estadoInicial.setText("{}");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(178, 178, 178));
        jLabel10.setText("Configuración Inicial Pila:");

        confiInicialPila.setForeground(new java.awt.Color(178, 178, 178));
        confiInicialPila.setText("{}");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(178, 178, 178));
        jLabel12.setText("Transiciones:");

        transicionesAp.setForeground(new java.awt.Color(178, 178, 178));
        transicionesAp.setText("n/a");

        javax.swing.GroupLayout panelDeInformacionLayout = new javax.swing.GroupLayout(panelDeInformacion);
        panelDeInformacion.setLayout(panelDeInformacionLayout);
        panelDeInformacionLayout.setHorizontalGroup(
            panelDeInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDeInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDeInformacionLayout.createSequentialGroup()
                        .addGroup(panelDeInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelDeInformacionLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(panelDeInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(simbolosEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(simbolosPila, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(estados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(estadoInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                            .addComponent(confiInicialPila, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                            .addComponent(transicionesAp, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelDeInformacionLayout.setVerticalGroup(
            panelDeInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(0, 0, 0)
                .addComponent(simbolosEntrada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(0, 0, 0)
                .addComponent(simbolosPila)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(0, 0, 0)
                .addComponent(estados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(0, 0, 0)
                .addComponent(estadoInicial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(0, 0, 0)
                .addComponent(confiInicialPila)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addGap(0, 0, 0)
                .addComponent(transicionesAp)
                .addGap(0, 0, 0))
        );

        scrollInformacion.setViewportView(panelDeInformacion);

        jScrollPane2.setBorder(null);

        javax.swing.GroupLayout panelTransicionesLayout = new javax.swing.GroupLayout(panelTransiciones);
        panelTransiciones.setLayout(panelTransicionesLayout);
        panelTransicionesLayout.setHorizontalGroup(
            panelTransicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 917, Short.MAX_VALUE)
        );
        panelTransicionesLayout.setVerticalGroup(
            panelTransicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(panelTransiciones);

        Cadena.setText("Cadena");

        inputDataAP.setToolTipText("Ingrese una cadena de simbolos");
        inputDataAP.setEnabled(false);
        inputDataAP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputDataAPKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Cadena)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputDataAP, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cadena, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputDataAP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelDeOperacionesLayout = new javax.swing.GroupLayout(panelDeOperaciones);
        panelDeOperaciones.setLayout(panelDeOperacionesLayout);
        panelDeOperacionesLayout.setHorizontalGroup(
            panelDeOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelDeOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelDeOperacionesLayout.setVerticalGroup(
            panelDeOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeOperacionesLayout.createSequentialGroup()
                .addGap(517, 517, 517)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panelDeOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDeOperacionesLayout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 55, Short.MAX_VALUE)))
        );

        scrollOperaciones.setViewportView(panelDeOperaciones);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setOpaque(false);

        jPanel1.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("▼");

        textoDeLaPila.setAlignmentX(0.5F);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(textoDeLaPila, javax.swing.GroupLayout.DEFAULT_SIZE, 1176, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoDeLaPila, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGap(7, 7, 7))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor);
        panelContenedor.setLayout(panelContenedorLayout);
        panelContenedorLayout.setHorizontalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLayout.createSequentialGroup()
                .addComponent(scrollInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollOperaciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
        );
        panelContenedorLayout.setVerticalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLayout.createSequentialGroup()
                .addGroup(panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollOperaciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollInformacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        udeaLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        udeaLabel.setForeground(new java.awt.Color(178, 178, 178));
        udeaLabel.setText("Universidad de Antioquia");
        udeaLabel.setAlignmentX(0.5F);

        jMenuBar1.setBackground(new java.awt.Color(33, 33, 33));
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseDragged(evt);
            }
        });
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuBar1MousePressed(evt);
            }
        });

        jMenu1.setBackground(new java.awt.Color(24, 24, 24));
        jMenu1.setForeground(new java.awt.Color(255, 255, 255));
        jMenu1.setText("File");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/teorialenguajes/udea/lab1/icons/if_new10_216291.png"))); // NOI18N
        jMenuItem3.setText("New AP");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/teorialenguajes/udea/lab1/icons/if_ic_folder_open_48px_352375.png"))); // NOI18N
        jMenuItem1.setText("Open AP");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Edit AP");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Save Matriz (PDF)        ");
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator3);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(udeaLabel)
                .addGap(525, 525, 525))
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(udeaLabel)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("Archivo de texto (JSON)", "txt");

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Seleccionar archivo de texto");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(extensionFilter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();

            try {
                Scanner input = new Scanner(file);
                String num = "";

                while (input.hasNext()) {
                    num += input.nextLine();
                }
                jsonAP = new JSONObject(num);

                initialConfig(jsonAP);
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "El archivo no existe", "Error leyendo archivo", JOptionPane.WARNING_MESSAGE);
            } catch (JSONException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "El formato del archivo es incorrecto", "Error leyendo archivo", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int res = JOptionPane.showConfirmDialog(this, "¿Realmente desea salir?",
                "Confirmar salida", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (res == 0) {
            editAP.dispose();
            dispose();
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuBar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_jMenuBar1MousePressed

    private void jMenuBar1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseDragged
        setLocation(getLocation().x + evt.getX() - x, getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_jMenuBar1MouseDragged

    private void inputDataAPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputDataAPKeyTyped
        boolean estaEnPermitidos = false;
        for (int i = 0; i < a.getSimbolosEntrada().length; i++) {
            if (evt.getKeyChar() == a.getSimbolosEntrada()[i]) {
                estaEnPermitidos = true;
                break;
            }
        }
        if (!estaEnPermitidos) {
            evt.consume();
        } else {
            ejecutarTransaccion(evt.getKeyChar());
        }
    }//GEN-LAST:event_inputDataAPKeyTyped

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            editAP.cargarJSONParaEditar(new JSONObject(jsonVacio));
            editAP.cargarAPParaEditar();
            editAP.referenciaAPantallaPrincipal(this);
            editAP.setVisible(true);
        } catch (JSONException ex) {
            Logger.getLogger(WindowPrint.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            if (jsonAP != null) {
                editAP.cargarJSONParaEditar(jsonAP);
                editAP.cargarAPParaEditar();
                editAP.referenciaAPantallaPrincipal(this);
                editAP.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese un AP primero");
            }
        } catch (JSONException ex) {
            Logger.getLogger(WindowPrint.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowPrint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowPrint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowPrint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowPrint.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowPrint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Cadena;
    private javax.swing.JLabel confiInicialPila;
    private javax.swing.JLabel estadoInicial;
    private javax.swing.JLabel estados;
    private javax.swing.JTextField inputDataAP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JPanel panelDeInformacion;
    private javax.swing.JPanel panelDeOperaciones;
    private javax.swing.JPanel panelTransiciones;
    private javax.swing.JScrollPane scrollInformacion;
    private javax.swing.JScrollPane scrollOperaciones;
    private javax.swing.JLabel simbolosEntrada;
    private javax.swing.JLabel simbolosPila;
    private javax.swing.JLabel textoDeLaPila;
    private javax.swing.JLabel transicionesAp;
    private javax.swing.JLabel udeaLabel;
    // End of variables declaration//GEN-END:variables

    private void initialConfig(JSONObject object) {
        panelTransiciones.removeAll();
        panelTransiciones.repaint();

        try {
            a = getAutomataPila(object);

            mostrarDatosAutomata(a);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        panelDeInformacion.repaint();

        /**
         * *******************************************************************
         */
        JPanel panelDelEstado = new JPanel();
        panelDelEstado.setLayout(new FlowLayout());

        for (Estado e : a.getEstados()) {
            JPanel panelEspecifico = new JPanel();
            panelEspecifico.setOpaque(false);
            panelEspecifico.setLayout(new BoxLayout(panelEspecifico, BoxLayout.Y_AXIS));

            String[] columns = new String[a.getSimbolosEntrada().length + 1];
            columns[0] = "";
            for (int i = 1; i < a.getSimbolosEntrada().length + 1; i++) {
                columns[i] = String.valueOf(a.getSimbolosEntrada()[i - 1]);
            }

            Object[][] data = new Object[a.getSimbolosPila().length][a.getSimbolosEntrada().length + 1];
            String[][] transiciones = e.getTransiciones();
            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < transiciones[i].length + 1; j++) {
                    if (j == 0) {
                        data[i][j] = a.getSimbolosPila()[i];
                    } else {
                        data[i][j] = transiciones[i][j - 1];
                    }
                }
            }

            Object[][] fullData = new Object[data.length+1][data[0].length];
            for (int i = 0; i < fullData.length; i++) {
                for (int j = 0; j < fullData[i].length; j++) {
                    if (i == 0) {
                        fullData[i][j] = columns[j];
                    } else {
                        fullData[i][j] = data[i-1][j];
                    }
                }
            }

            JTable table = new JTable(fullData, columns);
            table.getTableHeader().setReorderingAllowed(false);
            ColumsAutoSizer.sizeColumnsToFit(table);

            int widthTable = 0, height = 0;

            for (int i = 0; i < table.getColumnCount(); i++) {
                widthTable += table.getColumnModel().getColumn(i).getWidth();
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                if (i == 0) {
                    centerRenderer.setBackground(Color.decode("#333333"));
                    centerRenderer.setForeground(Color.decode("#b2b2b2"));
                }
                table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
            }
            height += table.getRowHeight() * table.getRowCount() + 28;

            JLabel nombreEstado = new JLabel(e.getNombre(), SwingConstants.CENTER);
            nombreEstado.setBounds(0, 0, 40, 20);
            nombreEstado.setLocation(panelEspecifico.getWidth() / 2 - 20, panelEspecifico.getHeight() / 2 + panelEspecifico.getHeight() / 2 - 5);

            panelEspecifico.add(table);
            panelEspecifico.add(nombreEstado);

            panelDelEstado.add(panelEspecifico);
        }
        panelTransiciones.add(panelDelEstado);

        /**
         * *******************************************************************
         */
        validate();
        repaint();
    }

    private AutomataPila getAutomataPila(JSONObject f) throws JSONException {
        char[] simbolosEntrada = null;
        char[] simbolosPila = null;
        Estado[] estados = null;
        Estado inicial = null;
        char[] configuracionInicialPila = null;
        List<Transicion> transiciones = new ArrayList<Transicion>();

        // CAPTURAR CADA UNO DE LAS PROPIEDADES DEL AP
        JSONArray simbolosEntradaJSON = f.getJSONArray("Simbolos de entrada");
        JSONArray simbolosEnPilaJSON = f.getJSONArray("Simbolos en la pila");
        JSONArray estadosJSON = f.getJSONArray("Estados");
        JSONArray confiInicialJSON = f.getJSONArray("Configuracion inicial");
        JSONObject transicionesJSON = f.getJSONObject("Transiciones");

        // INDICAR TAMAÑO DE CADA PROPIEDAD DEL MODELO DEL AP
        simbolosEntrada = new char[simbolosEntradaJSON.length()];
        simbolosPila = new char[simbolosEnPilaJSON.length()];
        estados = new Estado[estadosJSON.length()];
        configuracionInicialPila = new char[confiInicialJSON.length()];

        // ALFABETO
        for (int i = 0; i < simbolosEntradaJSON.length(); i++) {
            simbolosEntrada[i] = simbolosEntradaJSON.getString(i).charAt(0);
        }

        // ALFABETO PILA
        for (int i = 0; i < simbolosEnPilaJSON.length(); i++) {
            simbolosPila[i] = simbolosEnPilaJSON.getString(i).charAt(0);
        }

        // ESTADOS
        for (int i = 0; i < estadosJSON.length(); i++) {
            JSONObject estado = estadosJSON.getJSONObject(i);
            String nombre = estado.getString("nombre");
            boolean esInicial = estado.getBoolean("inicial");

            JSONArray transDelEstadoJSON = estado.getJSONArray("transiciones");
            String[][] transDelEstado = new String[transDelEstadoJSON.length()][transDelEstadoJSON.getJSONArray(0).length()];

            for (int j = 0; j < transDelEstadoJSON.length(); j++) {
                JSONArray operaciones = transDelEstadoJSON.getJSONArray(j);

                for (int k = 0; k < operaciones.length(); k++) {
                    transDelEstado[j][k] = operaciones.getString(k);
                }
            }

            estados[i] = new Estado(nombre, esInicial, transDelEstado);

            if (esInicial && inicial == null) {
                inicial = estados[i];
            }
        }

        // CONFIG PILA
        for (int i = 0; i < confiInicialJSON.length(); i++) {
            configuracionInicialPila[i] = confiInicialJSON.getString(i).charAt(0);
        }

        // TRANSICIONES
        Iterator transcicionesKeys = transicionesJSON.keys();
        while (transcicionesKeys.hasNext()) {
            String nombre = (String) transcicionesKeys.next();
            JSONArray operaciones = transicionesJSON.getJSONArray(nombre);

            String oper1 = null;
            String oper2 = null;
            String oper3 = null;

            for (int i = 0; i < operaciones.length(); i++) {
                if (i == 0) {
                    oper1 = operaciones.getString(i);
                } else if (i == 1) {
                    oper2 = operaciones.getString(i);
                } else if (i == 2) {
                    oper3 = operaciones.getString(i);
                }
            }

            transiciones.add(new Transicion(nombre, oper1, oper2, oper3));
        }

        // CREACION DEL AUTOMATA DE PILA
        AutomataPila a = new AutomataPila(simbolosEntrada, simbolosPila, estados, inicial, configuracionInicialPila, transiciones);

        return a;
    }

    private void mostrarDatosAutomata(AutomataPila a) {
        String simbolosEntradaText = "{ ";
        String simbolosEnLaPilaText = "{ ";
        String estadosText = "{ ";
        String estadoInicialText = "{ ";
        String confiInicialText = "{ ";
        String transicionesText = "";

        //<editor-fold desc="Simbolos de entrada">
        for (int i = 0; i < a.getSimbolosEntrada().length; i++) {
            simbolosEntradaText += a.getSimbolosEntrada()[i];
            if (i < a.getSimbolosEntrada().length - 1) {
                simbolosEntradaText += ", ";
            } else {
                simbolosEntradaText += " }";
            }
        }
        //</editor-fold>

        //<editor-fold desc="Simbolos en la pila">
        for (int i = 0; i < a.getSimbolosPila().length; i++) {
            simbolosEnLaPilaText += a.getSimbolosPila()[i];
            if (i < a.getSimbolosPila().length - 1) {
                simbolosEnLaPilaText += ", ";
            } else {
                simbolosEnLaPilaText += " }";
            }
        }
        //</editor-fold>

        //<editor-fold desc="Estados">
        for (int i = 0; i < a.getEstados().length; i++) {
            estadosText += a.getEstados()[i].getNombre();
            if (i < a.getEstados().length - 1) {
                estadosText += ", ";
            } else {
                estadosText += " }";
            }
        }
        //</editor-fold>

        //<editor-fold desc="Estado inicial">
        estadoInicialText += a.getInicial().getNombre() + " }";
        //</editor-fold>

        //<editor-fold desc="Configuración inicial de la pila">
        for (int i = 0; i < a.getConfiguracionInicialPila().length; i++) {
            confiInicialText += a.getConfiguracionInicialPila()[i];
            if (i < a.getConfiguracionInicialPila().length - 1) {
                confiInicialText += ", ";
            } else {
                confiInicialText += " }";
            }
        }
        //</editor-fold>

        //<editor-fold desc="Transiciones">
        for (int i = 0; i < a.getTransiciones().size(); i++) {
            String fullName = "<html><body><b><font color='green'>" + a.getTransiciones().get(i).getNombre() + "</b></font>: ";
            String oper1 = a.getTransiciones().get(i).getOperacionEnPila();
            String oper2 = a.getTransiciones().get(i).getOperacionDeEstado();
            String oper3 = a.getTransiciones().get(i).getOperacionDeEntrada();

            if (oper1 != null && oper2 != null && oper3 != null) {
                fullName += oper1 + ", " + oper2 + ", " + oper3;
            } else if (oper1 != null && oper2 != null) {
                fullName += oper1 + ", " + oper2;
            } else if (oper1 != null && oper3 != null) {
                fullName += oper1 + ", " + oper3;
            } else if (oper2 != null && oper3 != null) {
                fullName += oper2 + ", " + oper3;
            } else if (oper1 != null) {
                fullName += oper1;
            } else if (oper2 != null) {
                fullName += oper2;
            } else if (oper3 != null) {
                fullName += oper3;
            }

            fullName += "<br>";

            transicionesText += fullName;

        }
        transicionesText += "</body></html>";
        //</editor-fold>

        simbolosEntrada.setText(simbolosEntradaText);
        simbolosPila.setText(simbolosEnLaPilaText);
        estados.setText(estadosText);
        estadoInicial.setText(estadoInicialText);
        confiInicialPila.setText(confiInicialText);
        transicionesAp.setText(transicionesText);
        inputDataAP.setEnabled(true);
    }

    private void ejecutarTransaccion(char c) {
        pila.push(c);
        listaPila.add(c);

        mostrarPilaActual();
    }

    private void mostrarPilaActual() {
        String fullText = part1;
        for (int i = 0; i < listaPila.size(); i++) {
            if (i != 0) {
                fullText += part5;
            }

            fullText += part2;
            fullText += String.valueOf(listaPila.get(i));
            fullText += part3;
        }

        fullText += part4;

        textoDeLaPila.setText(fullText);
    }

    public void nuevoJSONAPDeLaVista(JSONObject jSONObject) throws JSONException {
        jsonAP = jSONObject;

        initialConfig(jsonAP);
    }
}
